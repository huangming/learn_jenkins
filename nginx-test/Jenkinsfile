pipeline { 
    agent any 
    options {
        buildDiscarder(logRotator(numToKeepStr:'10'))
        disableConcurrentBuilds()
        timeout(time:5, unit: 'MINUTES')
    }
    parameters {
        choice(name: 'CHOICES', choices: 'dev\ntest\nproduct', description: '请选择部署的环境')
    }
    triggers {
        // cron('30 16 * * *') // 定时任务
        // pollSCM('H/1 * * * *') // 每分钟判断代码是否变化
        gitlab(triggerOnPush: true, triggerOnMergeRequest: true, branchFilterType: 'All',
        secretToken: "ec4a11ba90ef6cc3ae28a1ace6d28a00")
    }
    stages {
        stage('checkout') { 
            steps { 
                script {
                    def url = 'git@gitlab.sample.com:hming/nginx-test.git'
                    def remote = [:]
                    remote.name = 'docker'
                    remote.host ='docker.sample.com'
                    remote.allowAnyHosts= true
  	                withCredentials([usernamePassword(credentialsId: 'docker_ssh', passwordVariable: 'password', usernameVariable: 'username')]) {
   	                	remote.user = "${username}"
   	                	remote.password = "${password}"
  	                }
                    def checkoutcommandStr="""
                      if [ ! -d "/home/vagrant/project/nginx-test" ]; then
                        cd /home/vagrant/project
                        git clone ${url}
                      fi
                      cd /home/vagrant/project/nginx-test
                      git pull
                    """
                    sshCommand remote: remote, command: checkoutcommandStr
                }
            }
        }
        stage('Build') { 
            steps { 
                script {
                    def remote = [:]
                    remote.name = 'docker'
                    remote.host ='docker.sample.com'
                    remote.allowAnyHosts= true
  	                withCredentials([usernamePassword(credentialsId: 'docker_ssh', passwordVariable: 'password', usernameVariable: 'username')]) {
   	                	remote.user = "${username}"
   	                	remote.password = "${password}"
  	                }
                    def commandStr = """
                      cd /home/vagrant/project/nginx-test
                      docker images -f "dangling=true" -q | uniq | xargs -I {} docker rmi --force {}
                      docker ps | grep "mynginx-test:last" | awk '{print \$1}'|sed 's/%//g' | uniq | xargs -I {} docker stop {}
                      docker ps -a | grep "mynginx-test:last" |awk '{print \$1}'|sed 's/%//g' | uniq | xargs -I {} docker rm {}
                      docker build -t mynginx-test:last .
                      docker run -p 8080:80 -d mynginx-test:last
                    """
                    sshCommand remote: remote, command: commandStr
                }
            }
            post {
                always {
                    echo "stage post always"
                }
            }
        }
        stage('Test'){
            steps {
                sh 'echo Test'
            }
        }
        stage('PreTest'){
            steps {
                script {
                    approvalMap = input(
                        message: '准备发布到哪个环境？',
                        ok: '确定',
                        parameters: [
                            choice(choices: 'dev\ntest\nproduct', description: '发布到什么环境?', name: 'ENV'),
                            string(defaultValue: '', description: '', name: 'myparam')
                        ],
                        submitter: 'admin,hming,root',
                        submitterParameter: 'APPROVER'
                    )
                }
            }
        }
        stage('Deploy to test') {
            when {
                expression { return params.CHOICES == 'test' }
            }
            steps {
                echo "Deploy to test"
            }
        }
        stage('Deploy to prod') {
            steps {
                echo "Deploy to prod"
                echo "操作者是 ${approvalMap['APPROVER']}"
                echo "发布到什么环境？ ${approvalMap['ENV']}"
                echo "自定义参数: ${approvalMap['myparam']}"
            }
        }
    }
    post {
        changed {
            echo "pipelinne post changed"
        }
        always {
            echo "pipelinne post always"
        }
        success {
            echo "pipelinne post success"
        }
    }
}
