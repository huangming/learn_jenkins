pipeline { 
    agent any 
    options {
        buildDiscarder(logRotator(numToKeepStr:'10'))
        disableConcurrentBuilds()
        timeout(time:5, unit: 'MINUTES')
    }
    triggers {
        // cron('30 16 * * *') // 定时任务
        // pollSCM('H/1 * * * *') // 每分钟判断代码是否变化
        gitlab(triggerOnPush: true, triggerOnMergeRequest: true, branchFilterType: 'All',
        secretToken: "ec4a11ba90ef6cc3ae28a1ace6d28a00")
    }
    stages {
        stage('checkout') { 
            steps { 
                script {
                    def url = 'git@gitlab.sample.com:hming/nginx-test.git'
                    def remote = [:]
                    remote.name = 'docker'
                    remote.host ='docker.sample.com'
                    remote.user = 'vagrant'
                    remote.password ='vagrant'
                    remote.allowAnyHosts= true
                    def checkoutcommandStr="""
                      if [ ! -d "/home/vagrant/project/nginx-test" ]; then
                        cd /home/vagrant/project
                        git clone ${url}
                      fi
                      cd /home/vagrant/project/nginx-test
                      git pull
                    """
                    sshCommand remote: remote, command: checkoutcommandStr
                }
            }
        }
        stage('Build') { 
            steps { 
                script {
                    def remote = [:]
                    remote.name = 'docker'
                    remote.host ='docker.sample.com'
                    remote.user = 'vagrant'
                    remote.password ='vagrant'
                    remote.allowAnyHosts= true
                    def commandStr = """
                      cd /home/vagrant/project/nginx-test
                      docker images -f "dangling=true" -q | uniq | xargs -I {} docker rmi --force {}
                      docker ps | grep "mynginx-test:last" | awk '{print \$1}'|sed 's/%//g' | uniq | xargs -I {} docker stop {}
                      docker ps -a | grep "mynginx-test:last" |awk '{print \$1}'|sed 's/%//g' | uniq | xargs -I {} docker rm {}
                      docker build -t mynginx-test:last .
                      docker run -p 8080:80 -d mynginx-test:last
                    """
                    sshCommand remote: remote, command: commandStr
                }
            }
            post {
                always {
                    echo "stage post always"
                }
            }
        }
        stage('Test'){
            steps {
                sh 'echo Test'
            }
        }
        stage('Deploy') {
            steps {
                sh 'echo Deploy'
            }
        }
    }
    post {
        changed {
            echo "pipelinne post changed"
        }
        always {
            echo "pipelinne post always"
        }
        success {
            echo "pipelinne post success"
        }
    }
}
